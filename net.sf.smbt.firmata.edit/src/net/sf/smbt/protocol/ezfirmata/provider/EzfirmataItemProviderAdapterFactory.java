/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.protocol.ezfirmata.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.protocol.ezfirmata.util.EzfirmataAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EzfirmataItemProviderAdapterFactory extends EzfirmataAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EzfirmataItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataCmdItemProvider firmataCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataCmdAdapter() {
		if (firmataCmdItemProvider == null) {
			firmataCmdItemProvider = new FirmataCmdItemProvider(this);
		}

		return firmataCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataReportDigitalPinCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataReportDigitalPinCmdItemProvider firmataReportDigitalPinCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataReportDigitalPinCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataReportDigitalPinCmdAdapter() {
		if (firmataReportDigitalPinCmdItemProvider == null) {
			firmataReportDigitalPinCmdItemProvider = new FirmataReportDigitalPinCmdItemProvider(this);
		}

		return firmataReportDigitalPinCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataReportAnalogPinCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataReportAnalogPinCmdItemProvider firmataReportAnalogPinCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataReportAnalogPinCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataReportAnalogPinCmdAdapter() {
		if (firmataReportAnalogPinCmdItemProvider == null) {
			firmataReportAnalogPinCmdItemProvider = new FirmataReportAnalogPinCmdItemProvider(this);
		}

		return firmataReportAnalogPinCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataSetPinModeCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataSetPinModeCmdItemProvider firmataSetPinModeCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataSetPinModeCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataSetPinModeCmdAdapter() {
		if (firmataSetPinModeCmdItemProvider == null) {
			firmataSetPinModeCmdItemProvider = new FirmataSetPinModeCmdItemProvider(this);
		}

		return firmataSetPinModeCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataProtocolVersionCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataProtocolVersionCmdItemProvider firmataProtocolVersionCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataProtocolVersionCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataProtocolVersionCmdAdapter() {
		if (firmataProtocolVersionCmdItemProvider == null) {
			firmataProtocolVersionCmdItemProvider = new FirmataProtocolVersionCmdItemProvider(this);
		}

		return firmataProtocolVersionCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataSystemResetCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataSystemResetCmdItemProvider firmataSystemResetCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataSystemResetCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataSystemResetCmdAdapter() {
		if (firmataSystemResetCmdItemProvider == null) {
			firmataSystemResetCmdItemProvider = new FirmataSystemResetCmdItemProvider(this);
		}

		return firmataSystemResetCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataAnalogIOMsgCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataAnalogIOMsgCmdItemProvider firmataAnalogIOMsgCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataAnalogIOMsgCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataAnalogIOMsgCmdAdapter() {
		if (firmataAnalogIOMsgCmdItemProvider == null) {
			firmataAnalogIOMsgCmdItemProvider = new FirmataAnalogIOMsgCmdItemProvider(this);
		}

		return firmataAnalogIOMsgCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataDigitalIOMsgCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataDigitalIOMsgCmdItemProvider firmataDigitalIOMsgCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataDigitalIOMsgCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataDigitalIOMsgCmdAdapter() {
		if (firmataDigitalIOMsgCmdItemProvider == null) {
			firmataDigitalIOMsgCmdItemProvider = new FirmataDigitalIOMsgCmdItemProvider(this);
		}

		return firmataDigitalIOMsgCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.SysexStart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SysexStartItemProvider sysexStartItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.SysexStart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSysexStartAdapter() {
		if (sysexStartItemProvider == null) {
			sysexStartItemProvider = new SysexStartItemProvider(this);
		}

		return sysexStartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.SysexStop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SysexStopItemProvider sysexStopItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.SysexStop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSysexStopAdapter() {
		if (sysexStopItemProvider == null) {
			sysexStopItemProvider = new SysexStopItemProvider(this);
		}

		return sysexStopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataSysexMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataSysexMessageItemProvider firmataSysexMessageItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataSysexMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataSysexMessageAdapter() {
		if (firmataSysexMessageItemProvider == null) {
			firmataSysexMessageItemProvider = new FirmataSysexMessageItemProvider(this);
		}

		return firmataSysexMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataCapabilitiesCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataCapabilitiesCmdItemProvider firmataCapabilitiesCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataCapabilitiesCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataCapabilitiesCmdAdapter() {
		if (firmataCapabilitiesCmdItemProvider == null) {
			firmataCapabilitiesCmdItemProvider = new FirmataCapabilitiesCmdItemProvider(this);
		}

		return firmataCapabilitiesCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.protocol.ezfirmata.FirmataPinStateResponse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirmataPinStateResponseItemProvider firmataPinStateResponseItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.protocol.ezfirmata.FirmataPinStateResponse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirmataPinStateResponseAdapter() {
		if (firmataPinStateResponseItemProvider == null) {
			firmataPinStateResponseItemProvider = new FirmataPinStateResponseItemProvider(this);
		}

		return firmataPinStateResponseItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (firmataCmdItemProvider != null) firmataCmdItemProvider.dispose();
		if (firmataReportDigitalPinCmdItemProvider != null) firmataReportDigitalPinCmdItemProvider.dispose();
		if (firmataReportAnalogPinCmdItemProvider != null) firmataReportAnalogPinCmdItemProvider.dispose();
		if (firmataSetPinModeCmdItemProvider != null) firmataSetPinModeCmdItemProvider.dispose();
		if (firmataProtocolVersionCmdItemProvider != null) firmataProtocolVersionCmdItemProvider.dispose();
		if (firmataSystemResetCmdItemProvider != null) firmataSystemResetCmdItemProvider.dispose();
		if (firmataAnalogIOMsgCmdItemProvider != null) firmataAnalogIOMsgCmdItemProvider.dispose();
		if (firmataDigitalIOMsgCmdItemProvider != null) firmataDigitalIOMsgCmdItemProvider.dispose();
		if (sysexStartItemProvider != null) sysexStartItemProvider.dispose();
		if (sysexStopItemProvider != null) sysexStopItemProvider.dispose();
		if (firmataSysexMessageItemProvider != null) firmataSysexMessageItemProvider.dispose();
		if (firmataCapabilitiesCmdItemProvider != null) firmataCapabilitiesCmdItemProvider.dispose();
		if (firmataPinStateResponseItemProvider != null) firmataPinStateResponseItemProvider.dispose();
	}

}
