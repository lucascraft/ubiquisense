/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.midi.ezmidi.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.midi.ezmidi.util.EzmidiAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EzmidiItemProviderAdapterFactory extends EzmidiAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EzmidiItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.SysexMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SysexMessageItemProvider sysexMessageItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.SysexMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSysexMessageAdapter() {
		if (sysexMessageItemProvider == null) {
			sysexMessageItemProvider = new SysexMessageItemProvider(this);
		}

		return sysexMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.SysexGSReset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SysexGSResetItemProvider sysexGSResetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.SysexGSReset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSysexGSResetAdapter() {
		if (sysexGSResetItemProvider == null) {
			sysexGSResetItemProvider = new SysexGSResetItemProvider(this);
		}

		return sysexGSResetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.SysexPatchChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SysexPatchChangedItemProvider sysexPatchChangedItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.SysexPatchChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSysexPatchChangedAdapter() {
		if (sysexPatchChangedItemProvider == null) {
			sysexPatchChangedItemProvider = new SysexPatchChangedItemProvider(this);
		}

		return sysexPatchChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.DSLMidiMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DSLMidiMessageItemProvider dslMidiMessageItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.DSLMidiMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDSLMidiMessageAdapter() {
		if (dslMidiMessageItemProvider == null) {
			dslMidiMessageItemProvider = new DSLMidiMessageItemProvider(this);
		}

		return dslMidiMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.NoteON} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoteONItemProvider noteONItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.NoteON}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoteONAdapter() {
		if (noteONItemProvider == null) {
			noteONItemProvider = new NoteONItemProvider(this);
		}

		return noteONItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.NoteOFF} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoteOFFItemProvider noteOFFItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.NoteOFF}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoteOFFAdapter() {
		if (noteOFFItemProvider == null) {
			noteOFFItemProvider = new NoteOFFItemProvider(this);
		}

		return noteOFFItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.KeyPressure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyPressureItemProvider keyPressureItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.KeyPressure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyPressureAdapter() {
		if (keyPressureItemProvider == null) {
			keyPressureItemProvider = new KeyPressureItemProvider(this);
		}

		return keyPressureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.ControllerChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControllerChangeItemProvider controllerChangeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.ControllerChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControllerChangeAdapter() {
		if (controllerChangeItemProvider == null) {
			controllerChangeItemProvider = new ControllerChangeItemProvider(this);
		}

		return controllerChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.ProgramChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramChangeItemProvider programChangeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.ProgramChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramChangeAdapter() {
		if (programChangeItemProvider == null) {
			programChangeItemProvider = new ProgramChangeItemProvider(this);
		}

		return programChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.ChannelPressure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelPressureItemProvider channelPressureItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.ChannelPressure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelPressureAdapter() {
		if (channelPressureItemProvider == null) {
			channelPressureItemProvider = new ChannelPressureItemProvider(this);
		}

		return channelPressureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.PitchBend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PitchBendItemProvider pitchBendItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.PitchBend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPitchBendAdapter() {
		if (pitchBendItemProvider == null) {
			pitchBendItemProvider = new PitchBendItemProvider(this);
		}

		return pitchBendItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.SystemExclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemExclusiveItemProvider systemExclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.SystemExclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemExclusiveAdapter() {
		if (systemExclusiveItemProvider == null) {
			systemExclusiveItemProvider = new SystemExclusiveItemProvider(this);
		}

		return systemExclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.SongPosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SongPositionItemProvider songPositionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.SongPosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSongPositionAdapter() {
		if (songPositionItemProvider == null) {
			songPositionItemProvider = new SongPositionItemProvider(this);
		}

		return songPositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.SongSelect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SongSelectItemProvider songSelectItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.SongSelect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSongSelectAdapter() {
		if (songSelectItemProvider == null) {
			songSelectItemProvider = new SongSelectItemProvider(this);
		}

		return songSelectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.UnofficialBusSelect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnofficialBusSelectItemProvider unofficialBusSelectItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.UnofficialBusSelect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnofficialBusSelectAdapter() {
		if (unofficialBusSelectItemProvider == null) {
			unofficialBusSelectItemProvider = new UnofficialBusSelectItemProvider(this);
		}

		return unofficialBusSelectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.TuneRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TuneRequestItemProvider tuneRequestItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.TuneRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTuneRequestAdapter() {
		if (tuneRequestItemProvider == null) {
			tuneRequestItemProvider = new TuneRequestItemProvider(this);
		}

		return tuneRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.EndOfExclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndOfExclusiveItemProvider endOfExclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.EndOfExclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndOfExclusiveAdapter() {
		if (endOfExclusiveItemProvider == null) {
			endOfExclusiveItemProvider = new EndOfExclusiveItemProvider(this);
		}

		return endOfExclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.TimingTick} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimingTickItemProvider timingTickItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.TimingTick}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimingTickAdapter() {
		if (timingTickItemProvider == null) {
			timingTickItemProvider = new TimingTickItemProvider(this);
		}

		return timingTickItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.StartSong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartSongItemProvider startSongItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.StartSong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartSongAdapter() {
		if (startSongItemProvider == null) {
			startSongItemProvider = new StartSongItemProvider(this);
		}

		return startSongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.ContinueSong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinueSongItemProvider continueSongItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.ContinueSong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinueSongAdapter() {
		if (continueSongItemProvider == null) {
			continueSongItemProvider = new ContinueSongItemProvider(this);
		}

		return continueSongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.StopSong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopSongItemProvider stopSongItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.StopSong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopSongAdapter() {
		if (stopSongItemProvider == null) {
			stopSongItemProvider = new StopSongItemProvider(this);
		}

		return stopSongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.ActiveSensing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActiveSensingItemProvider activeSensingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.ActiveSensing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActiveSensingAdapter() {
		if (activeSensingItemProvider == null) {
			activeSensingItemProvider = new ActiveSensingItemProvider(this);
		}

		return activeSensingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.SystemReset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemResetItemProvider systemResetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.SystemReset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemResetAdapter() {
		if (systemResetItemProvider == null) {
			systemResetItemProvider = new SystemResetItemProvider(this);
		}

		return systemResetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.MidiTimeCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiTimeCodeItemProvider midiTimeCodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.MidiTimeCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiTimeCodeAdapter() {
		if (midiTimeCodeItemProvider == null) {
			midiTimeCodeItemProvider = new MidiTimeCodeItemProvider(this);
		}

		return midiTimeCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.PolyPressure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyPressureItemProvider polyPressureItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.PolyPressure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolyPressureAdapter() {
		if (polyPressureItemProvider == null) {
			polyPressureItemProvider = new PolyPressureItemProvider(this);
		}

		return polyPressureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.TimingClock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimingClockItemProvider timingClockItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.TimingClock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimingClockAdapter() {
		if (timingClockItemProvider == null) {
			timingClockItemProvider = new TimingClockItemProvider(this);
		}

		return timingClockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.midi.ezmidi.TimeCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeCodeItemProvider timeCodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.midi.ezmidi.TimeCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeCodeAdapter() {
		if (timeCodeItemProvider == null) {
			timeCodeItemProvider = new TimeCodeItemProvider(this);
		}

		return timeCodeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sysexGSResetItemProvider != null) sysexGSResetItemProvider.dispose();
		if (sysexPatchChangedItemProvider != null) sysexPatchChangedItemProvider.dispose();
		if (dslMidiMessageItemProvider != null) dslMidiMessageItemProvider.dispose();
		if (noteONItemProvider != null) noteONItemProvider.dispose();
		if (noteOFFItemProvider != null) noteOFFItemProvider.dispose();
		if (keyPressureItemProvider != null) keyPressureItemProvider.dispose();
		if (controllerChangeItemProvider != null) controllerChangeItemProvider.dispose();
		if (programChangeItemProvider != null) programChangeItemProvider.dispose();
		if (channelPressureItemProvider != null) channelPressureItemProvider.dispose();
		if (pitchBendItemProvider != null) pitchBendItemProvider.dispose();
		if (systemExclusiveItemProvider != null) systemExclusiveItemProvider.dispose();
		if (songPositionItemProvider != null) songPositionItemProvider.dispose();
		if (songSelectItemProvider != null) songSelectItemProvider.dispose();
		if (unofficialBusSelectItemProvider != null) unofficialBusSelectItemProvider.dispose();
		if (tuneRequestItemProvider != null) tuneRequestItemProvider.dispose();
		if (endOfExclusiveItemProvider != null) endOfExclusiveItemProvider.dispose();
		if (timingTickItemProvider != null) timingTickItemProvider.dispose();
		if (startSongItemProvider != null) startSongItemProvider.dispose();
		if (continueSongItemProvider != null) continueSongItemProvider.dispose();
		if (stopSongItemProvider != null) stopSongItemProvider.dispose();
		if (activeSensingItemProvider != null) activeSensingItemProvider.dispose();
		if (systemResetItemProvider != null) systemResetItemProvider.dispose();
		if (midiTimeCodeItemProvider != null) midiTimeCodeItemProvider.dispose();
		if (polyPressureItemProvider != null) polyPressureItemProvider.dispose();
		if (timingClockItemProvider != null) timingClockItemProvider.dispose();
		if (timeCodeItemProvider != null) timeCodeItemProvider.dispose();
		if (sysexMessageItemProvider != null) sysexMessageItemProvider.dispose();
	}

}
