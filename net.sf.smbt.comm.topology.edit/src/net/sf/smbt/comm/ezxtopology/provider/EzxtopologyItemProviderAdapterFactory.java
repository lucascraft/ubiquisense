/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.comm.ezxtopology.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.comm.ezxtopology.util.EzxtopologyAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EzxtopologyItemProviderAdapterFactory extends EzxtopologyAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EzxtopologyItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.TopologyCache} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopologyCacheItemProvider topologyCacheItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.TopologyCache}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopologyCacheAdapter() {
		if (topologyCacheItemProvider == null) {
			topologyCacheItemProvider = new TopologyCacheItemProvider(this);
		}

		return topologyCacheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.TopologyNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopologyNodeItemProvider topologyNodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.TopologyNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopologyNodeAdapter() {
		if (topologyNodeItemProvider == null) {
			topologyNodeItemProvider = new TopologyNodeItemProvider(this);
		}

		return topologyNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.TopologyGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopologyGroupItemProvider topologyGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.TopologyGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopologyGroupAdapter() {
		if (topologyGroupItemProvider == null) {
			topologyGroupItemProvider = new TopologyGroupItemProvider(this);
		}

		return topologyGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.SessionManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SessionManagerItemProvider sessionManagerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.SessionManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSessionManagerAdapter() {
		if (sessionManagerItemProvider == null) {
			sessionManagerItemProvider = new SessionManagerItemProvider(this);
		}

		return sessionManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.UsbConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsbConnectionItemProvider usbConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.UsbConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUsbConnectionAdapter() {
		if (usbConnectionItemProvider == null) {
			usbConnectionItemProvider = new UsbConnectionItemProvider(this);
		}

		return usbConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.BluetoothConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BluetoothConnectionItemProvider bluetoothConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.BluetoothConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBluetoothConnectionAdapter() {
		if (bluetoothConnectionItemProvider == null) {
			bluetoothConnectionItemProvider = new BluetoothConnectionItemProvider(this);
		}

		return bluetoothConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.UDPConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UDPConnectionItemProvider udpConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.UDPConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUDPConnectionAdapter() {
		if (udpConnectionItemProvider == null) {
			udpConnectionItemProvider = new UDPConnectionItemProvider(this);
		}

		return udpConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.TcpConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcpConnectionItemProvider tcpConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.TcpConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcpConnectionAdapter() {
		if (tcpConnectionItemProvider == null) {
			tcpConnectionItemProvider = new TcpConnectionItemProvider(this);
		}

		return tcpConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.XBeeConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XBeeConnectionItemProvider xBeeConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.XBeeConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXBeeConnectionAdapter() {
		if (xBeeConnectionItemProvider == null) {
			xBeeConnectionItemProvider = new XBeeConnectionItemProvider(this);
		}

		return xBeeConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.ezxtopology.HTTPConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HTTPConnectionItemProvider httpConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.ezxtopology.HTTPConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHTTPConnectionAdapter() {
		if (httpConnectionItemProvider == null) {
			httpConnectionItemProvider = new HTTPConnectionItemProvider(this);
		}

		return httpConnectionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (topologyCacheItemProvider != null) topologyCacheItemProvider.dispose();
		if (topologyNodeItemProvider != null) topologyNodeItemProvider.dispose();
		if (topologyGroupItemProvider != null) topologyGroupItemProvider.dispose();
		if (sessionManagerItemProvider != null) sessionManagerItemProvider.dispose();
		if (usbConnectionItemProvider != null) usbConnectionItemProvider.dispose();
		if (bluetoothConnectionItemProvider != null) bluetoothConnectionItemProvider.dispose();
		if (udpConnectionItemProvider != null) udpConnectionItemProvider.dispose();
		if (tcpConnectionItemProvider != null) tcpConnectionItemProvider.dispose();
		if (xBeeConnectionItemProvider != null) xBeeConnectionItemProvider.dispose();
		if (httpConnectionItemProvider != null) httpConnectionItemProvider.dispose();
	}

}
