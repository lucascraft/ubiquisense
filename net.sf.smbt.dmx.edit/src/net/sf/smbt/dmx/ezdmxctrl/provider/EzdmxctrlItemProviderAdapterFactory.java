/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.dmx.ezdmxctrl.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.dmx.ezdmxctrl.util.EzdmxctrlAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EzdmxctrlItemProviderAdapterFactory extends EzdmxctrlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EzdmxctrlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXUniverseCtrl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXUniverseCtrlItemProvider dmxUniverseCtrlItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXUniverseCtrl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXUniverseCtrlAdapter() {
		if (dmxUniverseCtrlItemProvider == null) {
			dmxUniverseCtrlItemProvider = new DMXUniverseCtrlItemProvider(this);
		}

		return dmxUniverseCtrlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXChannelItemProvider dmxChannelItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXChannelAdapter() {
		if (dmxChannelItemProvider == null) {
			dmxChannelItemProvider = new DMXChannelItemProvider(this);
		}

		return dmxChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXFixture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXFixtureItemProvider dmxFixtureItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXFixture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXFixtureAdapter() {
		if (dmxFixtureItemProvider == null) {
			dmxFixtureItemProvider = new DMXFixtureItemProvider(this);
		}

		return dmxFixtureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXProjectItemProvider dmxProjectItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXProjectAdapter() {
		if (dmxProjectItemProvider == null) {
			dmxProjectItemProvider = new DMXProjectItemProvider(this);
		}

		return dmxProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXScene} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXSceneItemProvider dmxSceneItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXScene}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXSceneAdapter() {
		if (dmxSceneItemProvider == null) {
			dmxSceneItemProvider = new DMXSceneItemProvider(this);
		}

		return dmxSceneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXFx} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXFxItemProvider dmxFxItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXFx}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXFxAdapter() {
		if (dmxFxItemProvider == null) {
			dmxFxItemProvider = new DMXFxItemProvider(this);
		}

		return dmxFxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXBus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXBusItemProvider dmxBusItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXBus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXBusAdapter() {
		if (dmxBusItemProvider == null) {
			dmxBusItemProvider = new DMXBusItemProvider(this);
		}

		return dmxBusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXLibraryItemProvider dmxLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXLibraryAdapter() {
		if (dmxLibraryItemProvider == null) {
			dmxLibraryItemProvider = new DMXLibraryItemProvider(this);
		}

		return dmxLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.ChannelValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelValuesItemProvider channelValuesItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.ChannelValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelValuesAdapter() {
		if (channelValuesItemProvider == null) {
			channelValuesItemProvider = new ChannelValuesItemProvider(this);
		}

		return channelValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXFixtureSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXFixtureSetItemProvider dmxFixtureSetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXFixtureSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXFixtureSetAdapter() {
		if (dmxFixtureSetItemProvider == null) {
			dmxFixtureSetItemProvider = new DMXFixtureSetItemProvider(this);
		}

		return dmxFixtureSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXFixtureValuations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXFixtureValuationsItemProvider dmxFixtureValuationsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXFixtureValuations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXFixtureValuationsAdapter() {
		if (dmxFixtureValuationsItemProvider == null) {
			dmxFixtureValuationsItemProvider = new DMXFixtureValuationsItemProvider(this);
		}

		return dmxFixtureValuationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.ezdmxctrl.DMXCueSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXCueSequenceItemProvider dmxCueSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.ezdmxctrl.DMXCueSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXCueSequenceAdapter() {
		if (dmxCueSequenceItemProvider == null) {
			dmxCueSequenceItemProvider = new DMXCueSequenceItemProvider(this);
		}

		return dmxCueSequenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dmxUniverseCtrlItemProvider != null) dmxUniverseCtrlItemProvider.dispose();
		if (dmxChannelItemProvider != null) dmxChannelItemProvider.dispose();
		if (dmxFixtureItemProvider != null) dmxFixtureItemProvider.dispose();
		if (dmxProjectItemProvider != null) dmxProjectItemProvider.dispose();
		if (dmxSceneItemProvider != null) dmxSceneItemProvider.dispose();
		if (dmxFxItemProvider != null) dmxFxItemProvider.dispose();
		if (dmxBusItemProvider != null) dmxBusItemProvider.dispose();
		if (dmxLibraryItemProvider != null) dmxLibraryItemProvider.dispose();
		if (channelValuesItemProvider != null) channelValuesItemProvider.dispose();
		if (dmxFixtureSetItemProvider != null) dmxFixtureSetItemProvider.dispose();
		if (dmxFixtureValuationsItemProvider != null) dmxFixtureValuationsItemProvider.dispose();
		if (dmxCueSequenceItemProvider != null) dmxCueSequenceItemProvider.dispose();
	}

}
