/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.dmx.model.qxf.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.dmx.model.qxf.util.QxfAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QxfItemProviderAdapterFactory extends QxfAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QxfItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Bulb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BulbItemProvider bulbItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Bulb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBulbAdapter() {
		if (bulbItemProvider == null) {
			bulbItemProvider = new BulbItemProvider(this);
		}

		return bulbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Capability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityItemProvider capabilityItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Capability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityAdapter() {
		if (capabilityItemProvider == null) {
			capabilityItemProvider = new CapabilityItemProvider(this);
		}

		return capabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Channel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelItemProvider channelItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Channel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelAdapter() {
		if (channelItemProvider == null) {
			channelItemProvider = new ChannelItemProvider(this);
		}

		return channelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Colour} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColourItemProvider colourItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Colour}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColourAdapter() {
		if (colourItemProvider == null) {
			colourItemProvider = new ColourItemProvider(this);
		}

		return colourItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Creator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreatorItemProvider creatorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Creator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreatorAdapter() {
		if (creatorItemProvider == null) {
			creatorItemProvider = new CreatorItemProvider(this);
		}

		return creatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Dimensions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionsItemProvider dimensionsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Dimensions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionsAdapter() {
		if (dimensionsItemProvider == null) {
			dimensionsItemProvider = new DimensionsItemProvider(this);
		}

		return dimensionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.FixtureDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixtureDefinitionItemProvider fixtureDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.FixtureDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixtureDefinitionAdapter() {
		if (fixtureDefinitionItemProvider == null) {
			fixtureDefinitionItemProvider = new FixtureDefinitionItemProvider(this);
		}

		return fixtureDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Focus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FocusItemProvider focusItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Focus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFocusAdapter() {
		if (focusItemProvider == null) {
			focusItemProvider = new FocusItemProvider(this);
		}

		return focusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Lens} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LensItemProvider lensItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Lens}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLensAdapter() {
		if (lensItemProvider == null) {
			lensItemProvider = new LensItemProvider(this);
		}

		return lensItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Mode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeItemProvider modeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Mode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModeAdapter() {
		if (modeItemProvider == null) {
			modeItemProvider = new ModeItemProvider(this);
		}

		return modeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.ModeChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeChannelItemProvider modeChannelItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.ModeChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModeChannelAdapter() {
		if (modeChannelItemProvider == null) {
			modeChannelItemProvider = new ModeChannelItemProvider(this);
		}

		return modeChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Physical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalItemProvider physicalItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Physical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalAdapter() {
		if (physicalItemProvider == null) {
			physicalItemProvider = new PhysicalItemProvider(this);
		}

		return physicalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.qxf.Technical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TechnicalItemProvider technicalItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.qxf.Technical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTechnicalAdapter() {
		if (technicalItemProvider == null) {
			technicalItemProvider = new TechnicalItemProvider(this);
		}

		return technicalItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (bulbItemProvider != null) bulbItemProvider.dispose();
		if (capabilityItemProvider != null) capabilityItemProvider.dispose();
		if (channelItemProvider != null) channelItemProvider.dispose();
		if (colourItemProvider != null) colourItemProvider.dispose();
		if (creatorItemProvider != null) creatorItemProvider.dispose();
		if (dimensionsItemProvider != null) dimensionsItemProvider.dispose();
		if (fixtureDefinitionItemProvider != null) fixtureDefinitionItemProvider.dispose();
		if (focusItemProvider != null) focusItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (lensItemProvider != null) lensItemProvider.dispose();
		if (modeItemProvider != null) modeItemProvider.dispose();
		if (modeChannelItemProvider != null) modeChannelItemProvider.dispose();
		if (physicalItemProvider != null) physicalItemProvider.dispose();
		if (technicalItemProvider != null) technicalItemProvider.dispose();
	}

}
