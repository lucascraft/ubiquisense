/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.dmx.model.ezdmx.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.dmx.model.ezdmx.util.EzdmxAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EzdmxItemProviderAdapterFactory extends EzdmxAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EzdmxItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXReprogramFirmwareRequestCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXReprogramFirmwareRequestCmdItemProvider openDMXReprogramFirmwareRequestCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXReprogramFirmwareRequestCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXReprogramFirmwareRequestCmdAdapter() {
		if (openDMXReprogramFirmwareRequestCmdItemProvider == null) {
			openDMXReprogramFirmwareRequestCmdItemProvider = new OpenDMXReprogramFirmwareRequestCmdItemProvider(this);
		}

		return openDMXReprogramFirmwareRequestCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXProgramFlashPageRequestCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXProgramFlashPageRequestCmdItemProvider openDMXProgramFlashPageRequestCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXProgramFlashPageRequestCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXProgramFlashPageRequestCmdAdapter() {
		if (openDMXProgramFlashPageRequestCmdItemProvider == null) {
			openDMXProgramFlashPageRequestCmdItemProvider = new OpenDMXProgramFlashPageRequestCmdItemProvider(this);
		}

		return openDMXProgramFlashPageRequestCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXProgramFlashPageReply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXProgramFlashPageReplyItemProvider openDMXProgramFlashPageReplyItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXProgramFlashPageReply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXProgramFlashPageReplyAdapter() {
		if (openDMXProgramFlashPageReplyItemProvider == null) {
			openDMXProgramFlashPageReplyItemProvider = new OpenDMXProgramFlashPageReplyItemProvider(this);
		}

		return openDMXProgramFlashPageReplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetParamRequestCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXGetWidgetParamRequestCmdItemProvider openDMXGetWidgetParamRequestCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetParamRequestCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXGetWidgetParamRequestCmdAdapter() {
		if (openDMXGetWidgetParamRequestCmdItemProvider == null) {
			openDMXGetWidgetParamRequestCmdItemProvider = new OpenDMXGetWidgetParamRequestCmdItemProvider(this);
		}

		return openDMXGetWidgetParamRequestCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetParamsReplyCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXGetWidgetParamsReplyCmdItemProvider openDMXGetWidgetParamsReplyCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetParamsReplyCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXGetWidgetParamsReplyCmdAdapter() {
		if (openDMXGetWidgetParamsReplyCmdItemProvider == null) {
			openDMXGetWidgetParamsReplyCmdItemProvider = new OpenDMXGetWidgetParamsReplyCmdItemProvider(this);
		}

		return openDMXGetWidgetParamsReplyCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXSetWidgetParamsRequestCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXSetWidgetParamsRequestCmdItemProvider openDMXSetWidgetParamsRequestCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXSetWidgetParamsRequestCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXSetWidgetParamsRequestCmdAdapter() {
		if (openDMXSetWidgetParamsRequestCmdItemProvider == null) {
			openDMXSetWidgetParamsRequestCmdItemProvider = new OpenDMXSetWidgetParamsRequestCmdItemProvider(this);
		}

		return openDMXSetWidgetParamsRequestCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXReceivedPacketsCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXReceivedPacketsCmdItemProvider openDMXReceivedPacketsCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXReceivedPacketsCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXReceivedPacketsCmdAdapter() {
		if (openDMXReceivedPacketsCmdItemProvider == null) {
			openDMXReceivedPacketsCmdItemProvider = new OpenDMXReceivedPacketsCmdItemProvider(this);
		}

		return openDMXReceivedPacketsCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXOutputOnlySendDMXPacketsRequestCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXOutputOnlySendDMXPacketsRequestCmdItemProvider openDMXOutputOnlySendDMXPacketsRequestCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXOutputOnlySendDMXPacketsRequestCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXOutputOnlySendDMXPacketsRequestCmdAdapter() {
		if (openDMXOutputOnlySendDMXPacketsRequestCmdItemProvider == null) {
			openDMXOutputOnlySendDMXPacketsRequestCmdItemProvider = new OpenDMXOutputOnlySendDMXPacketsRequestCmdItemProvider(this);
		}

		return openDMXOutputOnlySendDMXPacketsRequestCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXSendRDMPacketCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXSendRDMPacketCmdItemProvider openDMXSendRDMPacketCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXSendRDMPacketCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXSendRDMPacketCmdAdapter() {
		if (openDMXSendRDMPacketCmdItemProvider == null) {
			openDMXSendRDMPacketCmdItemProvider = new OpenDMXSendRDMPacketCmdItemProvider(this);
		}

		return openDMXSendRDMPacketCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXReceiveDMXCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXReceiveDMXCmdItemProvider openDMXReceiveDMXCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXReceiveDMXCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXReceiveDMXCmdAdapter() {
		if (openDMXReceiveDMXCmdItemProvider == null) {
			openDMXReceiveDMXCmdItemProvider = new OpenDMXReceiveDMXCmdItemProvider(this);
		}

		return openDMXReceiveDMXCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXChangeOfStatePacketCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXChangeOfStatePacketCmdItemProvider openDMXChangeOfStatePacketCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXChangeOfStatePacketCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXChangeOfStatePacketCmdAdapter() {
		if (openDMXChangeOfStatePacketCmdItemProvider == null) {
			openDMXChangeOfStatePacketCmdItemProvider = new OpenDMXChangeOfStatePacketCmdItemProvider(this);
		}

		return openDMXChangeOfStatePacketCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetSerialNumberRequestCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXGetWidgetSerialNumberRequestCmdItemProvider openDMXGetWidgetSerialNumberRequestCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetSerialNumberRequestCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXGetWidgetSerialNumberRequestCmdAdapter() {
		if (openDMXGetWidgetSerialNumberRequestCmdItemProvider == null) {
			openDMXGetWidgetSerialNumberRequestCmdItemProvider = new OpenDMXGetWidgetSerialNumberRequestCmdItemProvider(this);
		}

		return openDMXGetWidgetSerialNumberRequestCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetSerialNumberReplyCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXGetWidgetSerialNumberReplyCmdItemProvider openDMXGetWidgetSerialNumberReplyCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXGetWidgetSerialNumberReplyCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXGetWidgetSerialNumberReplyCmdAdapter() {
		if (openDMXGetWidgetSerialNumberReplyCmdItemProvider == null) {
			openDMXGetWidgetSerialNumberReplyCmdItemProvider = new OpenDMXGetWidgetSerialNumberReplyCmdItemProvider(this);
		}

		return openDMXGetWidgetSerialNumberReplyCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXSendRDMDiscoveryRequestCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXSendRDMDiscoveryRequestCmdItemProvider openDMXSendRDMDiscoveryRequestCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXSendRDMDiscoveryRequestCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXSendRDMDiscoveryRequestCmdAdapter() {
		if (openDMXSendRDMDiscoveryRequestCmdItemProvider == null) {
			openDMXSendRDMDiscoveryRequestCmdItemProvider = new OpenDMXSendRDMDiscoveryRequestCmdItemProvider(this);
		}

		return openDMXSendRDMDiscoveryRequestCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXWidgetItemProvider openDMXWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXWidgetAdapter() {
		if (openDMXWidgetItemProvider == null) {
			openDMXWidgetItemProvider = new OpenDMXWidgetItemProvider(this);
		}

		return openDMXWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXFade} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXFadeItemProvider openDMXFadeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXFade}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXFadeAdapter() {
		if (openDMXFadeItemProvider == null) {
			openDMXFadeItemProvider = new OpenDMXFadeItemProvider(this);
		}

		return openDMXFadeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXFadeWithStrobe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXFadeWithStrobeItemProvider openDMXFadeWithStrobeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXFadeWithStrobe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXFadeWithStrobeAdapter() {
		if (openDMXFadeWithStrobeItemProvider == null) {
			openDMXFadeWithStrobeItemProvider = new OpenDMXFadeWithStrobeItemProvider(this);
		}

		return openDMXFadeWithStrobeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXFadeFull} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenDMXFadeFullItemProvider openDMXFadeFullItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.dmx.model.ezdmx.OpenDMXFadeFull}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenDMXFadeFullAdapter() {
		if (openDMXFadeFullItemProvider == null) {
			openDMXFadeFullItemProvider = new OpenDMXFadeFullItemProvider(this);
		}

		return openDMXFadeFullItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (openDMXReprogramFirmwareRequestCmdItemProvider != null) openDMXReprogramFirmwareRequestCmdItemProvider.dispose();
		if (openDMXProgramFlashPageRequestCmdItemProvider != null) openDMXProgramFlashPageRequestCmdItemProvider.dispose();
		if (openDMXProgramFlashPageReplyItemProvider != null) openDMXProgramFlashPageReplyItemProvider.dispose();
		if (openDMXGetWidgetParamRequestCmdItemProvider != null) openDMXGetWidgetParamRequestCmdItemProvider.dispose();
		if (openDMXGetWidgetParamsReplyCmdItemProvider != null) openDMXGetWidgetParamsReplyCmdItemProvider.dispose();
		if (openDMXSetWidgetParamsRequestCmdItemProvider != null) openDMXSetWidgetParamsRequestCmdItemProvider.dispose();
		if (openDMXReceivedPacketsCmdItemProvider != null) openDMXReceivedPacketsCmdItemProvider.dispose();
		if (openDMXOutputOnlySendDMXPacketsRequestCmdItemProvider != null) openDMXOutputOnlySendDMXPacketsRequestCmdItemProvider.dispose();
		if (openDMXSendRDMPacketCmdItemProvider != null) openDMXSendRDMPacketCmdItemProvider.dispose();
		if (openDMXReceiveDMXCmdItemProvider != null) openDMXReceiveDMXCmdItemProvider.dispose();
		if (openDMXChangeOfStatePacketCmdItemProvider != null) openDMXChangeOfStatePacketCmdItemProvider.dispose();
		if (openDMXGetWidgetSerialNumberRequestCmdItemProvider != null) openDMXGetWidgetSerialNumberRequestCmdItemProvider.dispose();
		if (openDMXGetWidgetSerialNumberReplyCmdItemProvider != null) openDMXGetWidgetSerialNumberReplyCmdItemProvider.dispose();
		if (openDMXSendRDMDiscoveryRequestCmdItemProvider != null) openDMXSendRDMDiscoveryRequestCmdItemProvider.dispose();
		if (openDMXWidgetItemProvider != null) openDMXWidgetItemProvider.dispose();
		if (openDMXFadeItemProvider != null) openDMXFadeItemProvider.dispose();
		if (openDMXFadeWithStrobeItemProvider != null) openDMXFadeWithStrobeItemProvider.dispose();
		if (openDMXFadeFullItemProvider != null) openDMXFadeFullItemProvider.dispose();
	}

}
