/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.ezmojo.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.ezmojo.util.EzmojoAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EzmojoItemProviderAdapterFactory extends EzmojoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EzmojoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZMojoNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZMojoNodeItemProvider ezMojoNodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZMojoNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZMojoNodeAdapter() {
		if (ezMojoNodeItemProvider == null) {
			ezMojoNodeItemProvider = new EZMojoNodeItemProvider(this);
		}

		return ezMojoNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZMojoCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZMojoCmdItemProvider ezMojoCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZMojoCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZMojoCmdAdapter() {
		if (ezMojoCmdItemProvider == null) {
			ezMojoCmdItemProvider = new EZMojoCmdItemProvider(this);
		}

		return ezMojoCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZVarItemProvider ezVarItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZVarAdapter() {
		if (ezVarItemProvider == null) {
			ezVarItemProvider = new EZVarItemProvider(this);
		}

		return ezVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZMojoRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZMojoRootItemProvider ezMojoRootItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZMojoRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZMojoRootAdapter() {
		if (ezMojoRootItemProvider == null) {
			ezMojoRootItemProvider = new EZMojoRootItemProvider(this);
		}

		return ezMojoRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZMojoTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZMojoTargetItemProvider ezMojoTargetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZMojoTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZMojoTargetAdapter() {
		if (ezMojoTargetItemProvider == null) {
			ezMojoTargetItemProvider = new EZMojoTargetItemProvider(this);
		}

		return ezMojoTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZMojoAgentCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZMojoAgentCmdItemProvider ezMojoAgentCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZMojoAgentCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZMojoAgentCmdAdapter() {
		if (ezMojoAgentCmdItemProvider == null) {
			ezMojoAgentCmdItemProvider = new EZMojoAgentCmdItemProvider(this);
		}

		return ezMojoAgentCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EzMojoInfoCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EzMojoInfoCmdItemProvider ezMojoInfoCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EzMojoInfoCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEzMojoInfoCmdAdapter() {
		if (ezMojoInfoCmdItemProvider == null) {
			ezMojoInfoCmdItemProvider = new EzMojoInfoCmdItemProvider(this);
		}

		return ezMojoInfoCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EzMojoService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EzMojoServiceItemProvider ezMojoServiceItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EzMojoService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEzMojoServiceAdapter() {
		if (ezMojoServiceItemProvider == null) {
			ezMojoServiceItemProvider = new EzMojoServiceItemProvider(this);
		}

		return ezMojoServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZMojoTargetedCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZMojoTargetedCmdItemProvider ezMojoTargetedCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZMojoTargetedCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZMojoTargetedCmdAdapter() {
		if (ezMojoTargetedCmdItemProvider == null) {
			ezMojoTargetedCmdItemProvider = new EZMojoTargetedCmdItemProvider(this);
		}

		return ezMojoTargetedCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.MotionEvalCtx} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotionEvalCtxItemProvider motionEvalCtxItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.MotionEvalCtx}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotionEvalCtxAdapter() {
		if (motionEvalCtxItemProvider == null) {
			motionEvalCtxItemProvider = new MotionEvalCtxItemProvider(this);
		}

		return motionEvalCtxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZScript} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZScriptItemProvider ezScriptItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZScript}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZScriptAdapter() {
		if (ezScriptItemProvider == null) {
			ezScriptItemProvider = new EZScriptItemProvider(this);
		}

		return ezScriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EzMojoKinematicCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EzMojoKinematicCmdItemProvider ezMojoKinematicCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EzMojoKinematicCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEzMojoKinematicCmdAdapter() {
		if (ezMojoKinematicCmdItemProvider == null) {
			ezMojoKinematicCmdItemProvider = new EzMojoKinematicCmdItemProvider(this);
		}

		return ezMojoKinematicCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZTUIOVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZTUIOVarItemProvider eztuioVarItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZTUIOVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZTUIOVarAdapter() {
		if (eztuioVarItemProvider == null) {
			eztuioVarItemProvider = new EZTUIOVarItemProvider(this);
		}

		return eztuioVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZMojoMappedCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZMojoMappedCmdItemProvider ezMojoMappedCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZMojoMappedCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZMojoMappedCmdAdapter() {
		if (ezMojoMappedCmdItemProvider == null) {
			ezMojoMappedCmdItemProvider = new EZMojoMappedCmdItemProvider(this);
		}

		return ezMojoMappedCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.MotionReactor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotionReactorItemProvider motionReactorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.MotionReactor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotionReactorAdapter() {
		if (motionReactorItemProvider == null) {
			motionReactorItemProvider = new MotionReactorItemProvider(this);
		}

		return motionReactorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Index2MojoNodeItemProvider index2MojoNodeItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndex2MojoNodeAdapter() {
		if (index2MojoNodeItemProvider == null) {
			index2MojoNodeItemProvider = new Index2MojoNodeItemProvider(this);
		}

		return index2MojoNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZ} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZItemProvider ezItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZ}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZAdapter() {
		if (ezItemProvider == null) {
			ezItemProvider = new EZItemProvider(this);
		}

		return ezItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ezmojo.EZEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EZEventItemProvider ezEventItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ezmojo.EZEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEZEventAdapter() {
		if (ezEventItemProvider == null) {
			ezEventItemProvider = new EZEventItemProvider(this);
		}

		return ezEventItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ezMojoNodeItemProvider != null) ezMojoNodeItemProvider.dispose();
		if (ezMojoCmdItemProvider != null) ezMojoCmdItemProvider.dispose();
		if (ezVarItemProvider != null) ezVarItemProvider.dispose();
		if (ezMojoRootItemProvider != null) ezMojoRootItemProvider.dispose();
		if (ezMojoTargetItemProvider != null) ezMojoTargetItemProvider.dispose();
		if (ezMojoAgentCmdItemProvider != null) ezMojoAgentCmdItemProvider.dispose();
		if (ezMojoInfoCmdItemProvider != null) ezMojoInfoCmdItemProvider.dispose();
		if (ezMojoServiceItemProvider != null) ezMojoServiceItemProvider.dispose();
		if (ezMojoTargetedCmdItemProvider != null) ezMojoTargetedCmdItemProvider.dispose();
		if (motionEvalCtxItemProvider != null) motionEvalCtxItemProvider.dispose();
		if (ezScriptItemProvider != null) ezScriptItemProvider.dispose();
		if (ezMojoKinematicCmdItemProvider != null) ezMojoKinematicCmdItemProvider.dispose();
		if (eztuioVarItemProvider != null) eztuioVarItemProvider.dispose();
		if (ezMojoMappedCmdItemProvider != null) ezMojoMappedCmdItemProvider.dispose();
		if (motionReactorItemProvider != null) motionReactorItemProvider.dispose();
		if (index2MojoNodeItemProvider != null) index2MojoNodeItemProvider.dispose();
		if (ezItemProvider != null) ezItemProvider.dispose();
		if (ezEventItemProvider != null) ezEventItemProvider.dispose();
	}

}
