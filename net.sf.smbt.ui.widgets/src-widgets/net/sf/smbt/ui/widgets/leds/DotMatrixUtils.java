/***********************************************************************************
 * Ubiquisense - A smart ambient utilities framework 
 * 
 * Copyright (c) 2012, Lucas Bigeardel
 * 
 * The library is released under:
 * 
 * A) LGPL
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA
 * 
 * B) EPL
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Lucas Bigeardel <lucas.bigeardel@gmail.com> - Initial API and implementation
 ***********************************************************************************/

package net.sf.smbt.ui.widgets.leds;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;

public class DotMatrixUtils {

	public final static int DOT_MATRIX_ROUND_STYLE	= 1;
	public final static int DOT_MATRIX_SQUARE_STYLE	= 2;
	
	public final static int DOT_MATRIX_CHAR_5X7_DIM		= 1; 
	public final static int DOT_MATRIX_CHAR_12X12_DIM	= 2; 

	public final static DotMatrixUtils INSTANCE = new DotMatrixUtils();

	private Map<Integer, Map<Character, Integer>> charsetsMap;
	private Map<Integer, Dimension> charsetDim;

	private Map<Character, Integer> l5x7IndexMap;
	private Map<Character, Integer> l12x12IndexMap;
	
	
	//
	//
	//
	//	5 x 7
	//
	//
	//
	
	
	public final static byte[][] values5x7 = new byte[][] {
		new byte[] {		// 0  : A 
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,1,1,1,
				1,0,0,0,1,
				1,0,0,0,1,
			},
			new byte[] {	// 1  : B
				1,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,1,1,0,
			},
			new byte[] {	// 2  : C
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 3  : D
				1,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,1,1,0,
			},
			new byte[] {	// 4  : E
				1,1,1,1,1,
				1,0,0,0,0,
				1,0,0,0,0,
				1,1,1,1,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,1,1,1,1,
			},
			new byte[] {	// 5  : F
				1,1,1,1,1,
				1,0,0,0,0,
				1,0,0,0,0,
				1,1,1,1,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
			},
			new byte[] {	// 6  : G
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,1,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 7  : H
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,1,1,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
			},
			new byte[] {	// 8  : I
				0,1,1,1,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,1,1,1,0,
			},
			new byte[] {	// 9 : J
				0,0,1,1,1,
				0,0,0,0,1,
				0,0,0,0,1,
				0,0,0,0,1,
				0,0,0,0,1,
				0,1,0,0,1,
				0,0,1,1,0
			},
			new byte[] {	// 10 : K
				1,0,0,0,1,
				1,0,0,1,0,
				1,0,1,0,0,
				1,1,0,0,0,
				1,0,1,0,0,
				1,0,0,1,0,
				1,0,0,0,1,
			},
			new byte[] {	// 11 : L
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,1,1,1,1,
			},
			new byte[] {	// 12 : M
				1,0,0,0,1,
				1,1,0,1,1,
				1,0,1,0,1,
				1,0,1,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
			},
			new byte[] {	// 13 : N
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,0,1,1,
				1,0,1,0,1,
				1,0,0,1,1,
				1,0,0,0,1,
				1,0,0,0,1,
			},
			new byte[] {	// 14 : O
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 15 : P
				1,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,1,1,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
			},
			new byte[] {	// 16 : Q
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
				0,0,0,0,1,
			},
			new byte[] {	// 17 : R
				1,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,1,1,1,0,
				1,0,1,0,0,
				1,0,0,1,0,
				1,0,0,0,1,
			},
			new byte[] {	// 18 : S
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,0,
				0,1,1,1,0,
				0,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 19 : T
				1,1,1,1,1,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
			},
			new byte[] {	// 20 : U
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 21 : V
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,0,1,0,
				0,0,1,0,0,
			},
			new byte[] {	// 22 : W
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,1,0,1,
				1,0,1,0,1,
				0,1,0,1,0,
			},
			new byte[] {	// 23 : X
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,0,1,0,
				0,0,1,0,0,
				0,1,0,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
			},
			new byte[] {	// 24 : Y
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,1,
				0,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 25 : Z
				1,1,1,1,1,
				0,0,0,0,1,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				1,0,0,0,0,
				1,1,1,1,1,
			},
			new byte[] {	// 26 : 0
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,1,1,
				1,0,1,0,1,
				1,1,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 27 : 1
				0,0,1,0,0,
				0,1,1,0,0,
				1,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				1,1,1,1,1,
			},
			new byte[] {	// 28 : 2
				0,1,1,1,0,
				1,0,0,0,1,
				0,0,0,0,1,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				1,1,1,1,1,
			},
			new byte[] {	// 29 : 3
				0,1,1,1,0,
				1,0,0,0,1,
				0,0,0,0,1,
				0,0,1,1,0,
				0,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 30 : 4
				0,0,0,1,0,
				0,0,1,1,0,
				0,1,0,1,0,
				1,0,0,1,0,
				1,1,1,1,1,
				0,0,0,1,0,
				0,0,0,1,0,
			},
			new byte[] {	// 31 : 5
				1,1,1,1,1,
				1,0,0,0,0,
				1,1,1,1,0,
				0,0,0,0,1,
				0,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 32 : 6
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,0,
				1,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 33 : 7
				1,1,1,1,1,
				0,0,0,0,1,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
			},
			new byte[] {	// 34 : 8	
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 35 : 9	
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,1,
				0,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 36 : ' '	
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
			},
			new byte[] {	// 37 : ALL	
				1,1,1,1,1,
				1,1,1,1,1,
				1,1,1,1,1,
				1,1,1,1,1,
				1,1,1,1,1,
				1,1,1,1,1,
				1,1,1,1,1,
			},
			new byte[] {	// 38 : '_'	
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				1,1,1,1,1,
			},
			new byte[] {	// 39 : $	
				0,1,1,1,0,
				1,0,1,0,1,
				1,0,1,0,0,
				0,1,1,1,0,
				0,0,1,0,1,
				1,0,1,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 40 : euro	
				0,0,1,1,0,
				0,1,0,0,1,
				0,1,0,0,0,
				1,1,1,1,0,
				0,1,0,0,0,
				0,1,0,0,1,
				0,0,1,1,0,
			},
			new byte[] {	// 41 : %
				1,1,0,0,0,
				1,1,0,0,1,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				1,0,0,1,1,
				0,0,0,1,1,
			},
			new byte[] {	// 42 : ,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				1,1,0,0,0,
				0,1,0,0,0,
				1,0,0,0,0,
			},
			new byte[] {	// 43 : .
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				1,1,0,0,0,
				1,1,0,0,0,
			},
			new byte[] {	// 44 : !
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,0,0,0,0,
				0,1,0,0,0,
			},
			new byte[] {	// 45 : ?
				0,1,1,0,0,
				1,0,0,1,0,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				0,0,0,0,0,
				0,1,0,0,0,
			},
			new byte[] {	// 46 : (
				0,0,0,0,1,
				0,0,0,1,0,
				0,0,0,1,0,
				0,0,0,1,0,
				0,0,0,1,0,
				0,0,0,1,0,
				0,0,0,0,1,
			},
			new byte[] {	// 47 : )
				1,0,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				1,0,0,0,0,
			},
			new byte[] {	// 48 : -	
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,1,1,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
			},
			
			
			new byte[] {	// 49 : a	
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,1,1,0,
				0,0,0,0,1,
				0,1,1,0,1,
				1,0,0,0,1,
				0,1,1,1,1,
			},
			new byte[] {	// 50 : b	
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,1,1,0,0,
				1,0,0,1,0,
				1,0,0,1,0,
				1,1,1,0,0,
			},
			new byte[] {	// 51 : c	
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,1,1,0,
				1,0,0,0,1,
				1,0,0,0,0,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 52 : d	
				0,0,0,1,0,
				0,0,0,1,0,
				0,1,1,1,0,
				1,0,0,1,0,
				1,0,0,1,0,
				1,0,0,1,0,
				0,1,1,1,0,
			},
			new byte[] {	// 53 : e	
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,1,0,0,
				1,0,0,1,0,
				1,1,1,1,0,
				1,0,0,0,0,
				0,1,1,1,0,
			},
			new byte[] {	// 54 : f
				0,0,1,0,0,
				0,1,0,1,0,
				0,1,0,0,0,
				1,1,1,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
			},
			new byte[] {	// 55 : g	
				0,0,0,0,0,
				0,0,0,0,1,
				0,1,1,1,0,
				1,0,0,1,0,
				0,1,1,1,0,
				0,0,0,1,0,
				1,1,1,0,0,
			},
			new byte[] {	// 56 : h	
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,1,0,0,
				1,1,0,1,0,
				1,0,0,1,0,
				1,0,0,1,0,
			},
			new byte[] {	// 57  : i
				0,0,0,0,0,
				0,0,1,0,0,
				0,0,0,0,0,
				0,1,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,1,1,1,0,
			},
			new byte[] {	// 58 : j
				0,0,0,0,1,
				0,0,0,0,0,
				0,0,0,0,1,
				0,0,0,0,1,
				0,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 59 : k	
				1,0,0,0,0,
				1,0,0,0,0,
				1,0,0,1,0,
				1,0,1,0,0,
				1,1,0,0,0,
				1,0,1,0,0,
				1,0,0,1,0,
			},
			new byte[] {	// 60  : l
				0,1,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,1,1,1,0,
			},
			new byte[] {	// 61 : m	
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,0,1,0,
				1,0,1,0,1,
				1,0,1,0,1,
				1,0,1,0,1,
			},
			new byte[] {	// 62 : n	
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				1,0,1,1,0,
				0,1,0,0,1,
				0,1,0,0,1,
				0,1,0,0,1,
			},
			new byte[] {	// 63 : o	
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,1,1,0,
				0,1,0,0,1,
				0,1,0,0,1,
				0,1,0,0,1,
				0,0,1,1,0,
			},
			new byte[] {	// 64 : p
				0,0,0,0,0,
				0,0,0,0,0,
				1,1,1,1,0,
				1,0,0,0,1,
				1,1,1,1,0,
				1,0,0,0,0,
				1,0,0,0,0,
			},
			new byte[] {	// 65 : q
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,1,1,1,
				1,0,0,0,1,
				0,1,1,1,1,
				0,0,0,0,1,
				0,0,0,0,1,
			},
			new byte[] {	// 66  : r
				0,0,0,0,0,
				0,0,0,0,0,
				1,1,0,1,0,
				0,1,1,0,1,
				0,1,0,0,0,
				0,1,0,0,0,
				1,1,1,0,0,
			},
			new byte[] {	// 67  : s
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,1,1,0,
				1,0,0,0,0,
				0,1,1,1,0,
				0,0,0,0,1,
				1,1,1,1,0,
			},
			new byte[] {	// 68  : t
				0,0,0,0,0,
				0,1,0,0,0,
				1,1,1,0,0,
				0,1,0,0,0,
				0,1,0,0,0,
				0,1,0,1,0,
				0,0,1,0,0,
			},
			new byte[] {	// 69  : u
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,1,1,0,
			},
			new byte[] {	// 70  : v
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				1,0,0,0,1,
				1,0,0,0,1,
				0,1,0,1,0,
				0,0,1,0,0,
			},
			new byte[] {	// 71  : w
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				1,0,0,0,1,
				1,0,0,0,1,
				1,0,1,0,1,
				0,1,0,1,0,
			},
			new byte[] {	// 72  : x
				0,0,0,0,0,
				0,0,0,0,0,
				1,0,0,0,1,
				0,1,0,1,0,
				0,0,1,0,0,
				0,1,0,1,0,
				1,0,0,0,1,
			},
			new byte[] {	// 73  : y
				0,0,0,0,0,
				0,0,0,0,0,
				1,0,0,0,1,
				0,1,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				1,0,0,0,0,
			},
			new byte[] {	// 74  : z
				0,0,0,0,0,
				0,0,0,0,0,
				1,1,1,1,1,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				1,1,1,1,1,
			},
			new byte[] {	// 75  : /
				0,0,0,0,0,
				0,0,0,0,1,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				1,0,0,0,0,
				0,0,0,0,0,
			},
			new byte[] {	// 76  : :
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,1,0,0,
				0,0,0,0,0,
				0,0,1,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
			},
			new byte[] {	// 77  : *
				0,0,0,0,0,
				1,0,1,0,1,
				0,1,1,1,0,
				1,1,1,1,1,
				0,1,1,1,0,
				1,0,1,0,1,
				0,0,0,0,0,
			},
			new byte[] {	// 78  : >
				0,0,0,0,0,
				0,1,0,0,0,
				0,0,1,0,0,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				0,0,0,0,0,
			},
			new byte[] {	// 79  : <
				0,0,0,0,0,
				0,0,0,1,0,
				0,0,1,0,0,
				0,1,0,0,0,
				0,0,1,0,0,
				0,0,0,1,0,
				0,0,0,0,0,
			},
			new byte[] {	// 80  : |
				0,0,0,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,0,0,0,
				0,0,1,0,0,
				0,0,1,0,0,
				0,0,0,0,0,
			},
			new byte[] {	// 81  : =
				0,0,0,0,0,
				0,0,0,0,0,
				0,1,1,1,0,
				0,0,0,0,0,
				0,1,1,1,0,
				0,0,0,0,0,
				0,0,0,0,0,
			},
	};
	
	//
	//
	//
	//	12 x 12
	//
	//
	//
	
	
	public final static byte[][] values12x12 = new byte[][] {
		new byte[] {		// 0  : A 
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 1  : B 
				1,1,1,1,1,1,1,1,1,0,0,0,
				1,1,1,1,1,1,1,1,1,1,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 2  : C 
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 3  : D
				1,1,1,1,1,1,1,1,1,0,0,0,
				1,1,1,1,1,1,1,1,1,1,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 4  : E
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 5  : F
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 6  : G 
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,1,1,1,1,1,1,0,
				1,1,1,0,0,1,1,1,1,1,1,1,
				1,1,1,0,0,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 7  : H 
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 8  : I 
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
			},
			new byte[] {		// 9  : J 
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 10 : K 
				1,1,1,0,0,0,0,1,1,1,1,0,
				1,1,1,0,0,0,1,1,1,1,1,0,
				1,1,1,0,0,1,1,1,1,1,1,0,
				1,1,1,0,1,1,0,0,0,0,0,0,
				1,1,1,1,1,1,0,0,0,0,0,0,
				1,1,1,1,0,0,0,0,0,0,0,0,
				1,1,1,1,1,0,0,0,0,0,0,0,
				1,1,1,1,1,1,0,0,0,0,0,0,
				1,1,1,0,0,1,1,0,0,0,0,0,
				1,1,1,0,0,0,1,1,1,1,1,1,
				1,1,1,0,0,0,0,1,1,1,1,1,
				1,1,1,0,0,0,0,0,1,1,1,1,
			},
			new byte[] {		// 11 : L 
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 12 : M 
				0,1,1,0,0,0,0,0,0,1,1,0,
				1,1,1,1,0,0,0,0,1,1,1,1,
				1,1,1,1,1,0,0,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,1,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 13 : N
				0,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,0,0,0,0,0,1,1,1,
				1,1,1,1,1,0,0,0,0,1,1,1,
				1,1,1,1,1,1,0,0,0,1,1,1,
				1,1,1,0,1,1,1,0,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,0,1,1,1,1,1,1,
				1,1,1,0,0,0,0,1,1,1,1,1,
				1,1,1,0,0,0,0,0,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,0,
			},
			new byte[] {		// 14 : O
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 15 : P
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 16 : Q
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,1,1,0,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,0,1,1,1,1,1,1,
				1,1,1,0,0,0,0,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,0,1,1,
			},
			new byte[] {		// 17 : R
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,0,0,0,0,0,1,1,0,0,
				1,1,1,0,0,0,0,0,0,1,1,0,
				1,1,1,0,0,0,0,0,0,0,1,1,
			},
			new byte[] {		// 18 : S 
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 19 : T
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
			},
			new byte[] {		// 20 : U
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 21 : V
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				0,1,1,1,1,0,0,1,1,1,1,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
			},
			new byte[] {		// 22 : W
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,1,1,0,0,1,1,1,
				1,1,1,0,1,1,1,1,0,1,1,1,
				1,1,1,1,1,0,0,1,1,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				0,1,1,0,0,0,0,0,0,1,1,0,
			},
			new byte[] {		// 23 : X
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				0,1,1,1,1,0,0,1,1,1,1,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,1,1,1,1,0,0,1,1,1,1,0,
				1,1,1,1,0,0,0,0,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 24 : Y
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				0,1,1,1,1,0,0,1,1,1,1,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
			},
			new byte[] {		// 25 : Z
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,1,1,1,0,0,
				0,0,0,0,0,0,1,1,1,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,0,0,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,1,1,1,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 26 : a
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 27 : b
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 28 : c 
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 29 : d
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 30 : e 
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 31 : f 
				0,0,0,0,1,1,1,1,1,1,1,1,
				0,0,0,1,1,1,1,1,1,1,1,1,
				0,0,0,1,1,1,1,1,1,1,1,1,
				0,0,0,1,1,1,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
			},
			new byte[] {		// 32 : g 
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 33 : h 
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 34 : i 
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
			},
			new byte[] {		// 35 : j 
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 36 : k 
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,1,1,1,0,0,0,0,0,
				1,1,1,0,1,1,1,0,0,0,0,0,
				1,1,1,0,1,1,1,1,1,1,1,1,
				1,1,1,0,1,1,1,1,1,1,1,1,
				1,1,1,0,0,1,1,1,1,1,1,1,
			},
			new byte[] {		// 37 : l 
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
			},
			new byte[] {		// 38 : m 
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
				1,1,1,0,0,1,1,1,0,1,1,1,
			},
			new byte[] {		// 39 : n 
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,0,0,0,0,
				1,1,1,1,1,1,1,1,1,0,0,0,
				1,1,1,1,1,1,1,1,1,1,0,0,
				1,1,1,0,0,0,0,0,1,1,1,0,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 40 : o
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 41 : p
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 42 : q
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 43 : r
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 44 : s 
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 45 : t 
				0,1,1,1,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,0,0,0,0,0,0,0,0,
				0,1,1,1,0,0,0,0,0,0,0,0,
				0,1,1,1,0,0,0,0,0,0,0,0,
				0,1,1,1,0,0,0,0,0,0,0,0,
				0,1,1,1,0,0,0,0,0,0,0,0,
				0,1,1,1,1,1,1,1,1,1,1,0,
				0,1,1,1,1,1,1,1,1,1,1,0,
				0,0,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 46 : u
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 47 : v
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				0,1,1,1,1,0,0,1,1,1,1,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
			},
			new byte[] {		// 48 : w
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,1,1,0,0,1,1,1,
				1,1,1,0,1,1,1,1,0,1,1,1,
				1,1,1,1,1,0,0,1,1,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				0,1,1,0,0,0,0,0,0,1,1,0,
			},
			new byte[] {		// 49 : x
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				1,1,1,1,1,0,0,1,1,1,1,1,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				1,1,1,1,1,0,0,1,1,1,1,1,
				1,1,1,1,0,0,0,0,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
			},
			new byte[] {		// 50 : y 
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 51 : z
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,1,1,1,0,0,
				0,0,0,0,0,0,1,1,1,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,0,0,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,1,1,1,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 52 : $
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,1,1,0,1,1,0,0,0,0,0,
				0,0,1,1,0,1,1,0,0,0,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,0,0,0,1,1,0,1,1,0,0,
				0,0,0,0,0,1,1,0,1,1,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,1,1,1,1,1,1,1,1,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
			},
			new byte[] {		// 53 : +
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 54 : -
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 55 : *
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,1,1,0,1,1,0,1,1,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,1,1,0,1,1,0,1,1,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 56 : /
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,1,1,0,0,0,0,
				0,0,0,0,0,0,1,1,0,0,0,0,
				0,0,0,0,0,0,1,1,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,1,1,0,0,0,0,0,0,
				0,0,0,0,1,1,0,0,0,0,0,0,
				0,0,0,0,1,1,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 57 : =
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 58 : %
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,1,1,1,0,0,0,0,0,0,1,0,
				1,1,1,1,1,0,0,0,0,1,1,0,
				1,1,0,1,1,0,0,0,1,1,1,0,
				1,1,1,1,1,0,0,1,1,1,0,0,
				0,1,1,1,0,0,1,1,1,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,0,1,1,1,0,
				0,0,0,1,1,1,0,1,1,1,1,1,
				0,0,1,1,1,0,0,1,1,0,1,1,
				0,0,1,1,0,0,0,1,1,1,1,1,
				0,0,1,0,0,0,0,0,1,1,1,0,
			},
			new byte[] {		// 59 : 0
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 60 : 1 
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
			},
			new byte[] {		// 61 : 2 
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
			},
			new byte[] {		// 62 : 3 
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,1,1,1,1,1,1,1,1,1,1,
				0,0,1,1,1,1,1,1,1,1,1,0,
				0,0,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 63 : 4 
				1,1,1,0,0,0,0,0,1,1,1,0,
				1,1,1,0,0,0,0,0,1,1,1,0,
				1,1,1,0,0,0,0,0,1,1,1,0,
				1,1,1,0,0,0,0,0,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,1,1,1,0,
				0,0,0,0,0,0,0,0,1,1,1,0,
				0,0,0,0,0,0,0,0,1,1,1,0,
				0,0,0,0,0,0,0,0,1,1,1,0,
				0,0,0,0,0,0,0,0,1,1,1,0,
			},
			new byte[] {		// 64 : 5 
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 65 : 6 
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 66 : 7 
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,1,1,1,0,
				0,0,0,0,0,0,0,1,1,1,0,0,
				0,0,0,0,0,0,1,1,1,0,0,0,
				0,0,0,0,0,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,0,0,0,0,0,
				0,0,0,0,1,1,1,0,0,0,0,0,
				0,0,0,0,1,1,1,0,0,0,0,0,
				0,0,0,0,1,1,1,0,0,0,0,0,
			},
			new byte[] {		// 67 : 8 
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 68 : 9 
				0,1,1,1,1,1,1,1,1,1,1,0,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				0,0,0,0,0,0,0,0,0,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,
				1,1,1,1,1,1,1,1,1,1,1,0,
			},
			new byte[] {		// 69 : ( 
				0,0,0,0,0,1,1,1,1,0,0,0,
				0,0,0,0,1,1,1,1,1,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,0,1,1,0,0,0,0,0,0,0,
				0,0,0,1,1,0,0,0,0,0,0,0,
				0,0,0,1,1,0,0,0,0,0,0,0,
				0,0,0,1,1,0,0,0,0,0,0,0,
				0,0,0,1,1,0,0,0,0,0,0,0,
				0,0,0,1,1,0,0,0,0,0,0,0,
				0,0,0,1,1,1,0,0,0,0,0,0,
				0,0,0,0,1,1,1,1,1,0,0,0,
				0,0,0,0,0,1,1,1,1,0,0,0,
			},
			new byte[] {		// 70 : )
				0,0,0,1,1,1,1,0,0,0,0,0,
				0,0,0,1,1,1,1,1,0,0,0,0,
				0,0,0,0,0,0,1,1,1,0,0,0,
				0,0,0,0,0,0,0,1,1,0,0,0,
				0,0,0,0,0,0,0,1,1,0,0,0,
				0,0,0,0,0,0,0,1,1,0,0,0,
				0,0,0,0,0,0,0,1,1,0,0,0,
				0,0,0,0,0,0,0,1,1,0,0,0,
				0,0,0,0,0,0,0,1,1,0,0,0,
				0,0,0,0,0,0,1,1,1,0,0,0,
				0,0,0,1,1,1,1,1,0,0,0,0,
				0,0,0,1,1,1,1,0,0,0,0,0,
			},
			new byte[] {		// 71 : .
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
			},
			new byte[] {		// 72 : ,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,1,1,1,1,0,0,0,0,
				0,0,0,0,0,0,1,1,0,0,0,0,
			},
			new byte[] {		// 73 : ;
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,0,1,0,0,0,0,0,
				0,0,0,0,0,1,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 74 : :
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,1,1,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
			},
			new byte[] {		// 75 : _
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
				0,0,0,1,1,1,1,1,1,0,0,0,
			},
		};

	public DotMatrixUtils() {
		charsetsMap	= new HashMap<Integer, Map<Character,Integer>>();
		charsetDim	= new HashMap<Integer, Dimension>();
		
		l5x7IndexMap = new HashMap<Character, Integer>();
		charsetsMap.put(DOT_MATRIX_CHAR_5X7_DIM, l5x7IndexMap);
		charsetDim.put(DOT_MATRIX_CHAR_5X7_DIM, new Dimension(5, 7));
		
		l5x7IndexMap.put('A', 0);
		l5x7IndexMap.put('B', 1);
		l5x7IndexMap.put('C', 2);
		l5x7IndexMap.put('D', 3);
		l5x7IndexMap.put('E', 4);
		l5x7IndexMap.put('F', 5);
		l5x7IndexMap.put('G', 6);
		l5x7IndexMap.put('H', 7);
		l5x7IndexMap.put('I', 8);
		l5x7IndexMap.put('J', 9);
		l5x7IndexMap.put('K', 10);
		l5x7IndexMap.put('L', 11);
		l5x7IndexMap.put('M', 12);
		l5x7IndexMap.put('N', 13);
		l5x7IndexMap.put('O', 14);
		l5x7IndexMap.put('P', 15);
		l5x7IndexMap.put('Q', 16);
		l5x7IndexMap.put('R', 17);
		l5x7IndexMap.put('S', 18);
		l5x7IndexMap.put('T', 19);
		l5x7IndexMap.put('U', 20);
		l5x7IndexMap.put('V', 21);
		l5x7IndexMap.put('W', 22);
		l5x7IndexMap.put('X', 23);
		l5x7IndexMap.put('Y', 24);
		l5x7IndexMap.put('Z', 25);
		
		l5x7IndexMap.put('0', 26);
		l5x7IndexMap.put('1', 27);
		l5x7IndexMap.put('2', 28);
		l5x7IndexMap.put('3', 29);
		l5x7IndexMap.put('4', 30);
		l5x7IndexMap.put('5', 31);
		l5x7IndexMap.put('6', 32);
		l5x7IndexMap.put('7', 33);
		l5x7IndexMap.put('8', 34);
		l5x7IndexMap.put('9', 35);
		
		l5x7IndexMap.put(' ', 36);
		l5x7IndexMap.put('_', 38);
		l5x7IndexMap.put('$', 39);
		l5x7IndexMap.put('%', 41);
		l5x7IndexMap.put(',', 42);
		l5x7IndexMap.put('.', 43);
		l5x7IndexMap.put('!', 44);
		l5x7IndexMap.put('?', 45);
		l5x7IndexMap.put('(', 46);
		l5x7IndexMap.put(')', 47);
		l5x7IndexMap.put('-', 48);

		l5x7IndexMap.put('a', 49);
		l5x7IndexMap.put('b', 50);
		l5x7IndexMap.put('c', 51);
		l5x7IndexMap.put('d', 52);
		l5x7IndexMap.put('e', 53);
		l5x7IndexMap.put('f', 54);
		l5x7IndexMap.put('g', 55);
		l5x7IndexMap.put('h', 56);
		l5x7IndexMap.put('i', 57);
		l5x7IndexMap.put('j', 58);
		l5x7IndexMap.put('k', 59);
		l5x7IndexMap.put('l', 60);
		l5x7IndexMap.put('m', 61);
		l5x7IndexMap.put('n', 62);
		l5x7IndexMap.put('o', 63);
		l5x7IndexMap.put('p', 64);
		l5x7IndexMap.put('q', 65);
		l5x7IndexMap.put('r', 66);
		l5x7IndexMap.put('s', 67);
		l5x7IndexMap.put('t', 68);
		l5x7IndexMap.put('u', 69);
		l5x7IndexMap.put('v', 70);
		l5x7IndexMap.put('w', 71);
		l5x7IndexMap.put('x', 72);
		l5x7IndexMap.put('y', 73);
		l5x7IndexMap.put('z', 74);

		l5x7IndexMap.put('/', 75);
		l5x7IndexMap.put(':', 76);
		l5x7IndexMap.put('*', 77);
		l5x7IndexMap.put('>', 78);
		l5x7IndexMap.put('<', 79);
		l5x7IndexMap.put('|', 80);
		l5x7IndexMap.put('=', 81);
		
		l12x12IndexMap = new HashMap<Character, Integer>();
		charsetsMap.put(DOT_MATRIX_CHAR_12X12_DIM, l12x12IndexMap);
		charsetDim.put(DOT_MATRIX_CHAR_12X12_DIM, new Dimension(12, 12));

		l12x12IndexMap.put('A', 0);
		l12x12IndexMap.put('B', 1);
		l12x12IndexMap.put('C', 2);
		l12x12IndexMap.put('D', 3);
		l12x12IndexMap.put('E', 4);
		l12x12IndexMap.put('F', 5);
		l12x12IndexMap.put('G', 6);
		l12x12IndexMap.put('H', 7);
		l12x12IndexMap.put('I', 8);
		l12x12IndexMap.put('J', 9);
		l12x12IndexMap.put('K', 10);
		l12x12IndexMap.put('L', 11);
		l12x12IndexMap.put('M', 12);
		l12x12IndexMap.put('N', 13);
		l12x12IndexMap.put('O', 14);
		l12x12IndexMap.put('P', 15);
		l12x12IndexMap.put('Q', 16);
		l12x12IndexMap.put('R', 17);
		l12x12IndexMap.put('S', 18);
		l12x12IndexMap.put('T', 19);
		l12x12IndexMap.put('U', 20);
		l12x12IndexMap.put('V', 21);
		l12x12IndexMap.put('W', 22);
		l12x12IndexMap.put('X', 23);
		l12x12IndexMap.put('Y', 24);
		l12x12IndexMap.put('Z', 25);

		l12x12IndexMap.put('a', 26);
		l12x12IndexMap.put('b', 27);
		l12x12IndexMap.put('c', 28);
		l12x12IndexMap.put('d', 29);
		l12x12IndexMap.put('e', 30);
		l12x12IndexMap.put('f', 31);
		l12x12IndexMap.put('g', 32);
		l12x12IndexMap.put('h', 33);
		l12x12IndexMap.put('i', 34);
		l12x12IndexMap.put('j', 35);
		l12x12IndexMap.put('k', 36);
		l12x12IndexMap.put('l', 37);
		l12x12IndexMap.put('m', 38);
		l12x12IndexMap.put('n', 39);
		l12x12IndexMap.put('o', 40);
		l12x12IndexMap.put('p', 41);
		l12x12IndexMap.put('q', 42);
		l12x12IndexMap.put('r', 43);
		l12x12IndexMap.put('s', 44);
		l12x12IndexMap.put('t', 45);
		l12x12IndexMap.put('u', 46);
		l12x12IndexMap.put('v', 47);
		l12x12IndexMap.put('w', 48);
		l12x12IndexMap.put('x', 49);
		l12x12IndexMap.put('y', 50);
		l12x12IndexMap.put('z', 51);
		
		l12x12IndexMap.put('$', 52);
		l12x12IndexMap.put('+', 53);
		l12x12IndexMap.put('-', 54);
		l12x12IndexMap.put('*', 55);
		l12x12IndexMap.put('/', 56);
		l12x12IndexMap.put('=', 57);
		l12x12IndexMap.put('%', 58);

		l12x12IndexMap.put('0', 59);
		l12x12IndexMap.put('1', 60);
		l12x12IndexMap.put('2', 61);
		l12x12IndexMap.put('3', 62);
		l12x12IndexMap.put('4', 63);
		l12x12IndexMap.put('5', 64);
		l12x12IndexMap.put('6', 65);
		l12x12IndexMap.put('7', 66);
		l12x12IndexMap.put('8', 67);
		l12x12IndexMap.put('9', 68);
		
		l12x12IndexMap.put('(', 69);
		l12x12IndexMap.put(')', 70);
		l12x12IndexMap.put(')', 70);
		l12x12IndexMap.put('.', 71);
		l12x12IndexMap.put(',', 72);
		l12x12IndexMap.put(';', 73);
		l12x12IndexMap.put(':', 74);
		l12x12IndexMap.put('_', 75);
	}
	
	/**
	 * Returns an array of 1 and 0 values representing the charcter as a bitmap
	 * 
	 * @param charsetID charset ID
	 * @param d character to be displayed
	 * 
	 * @return an array of 1 and 0 values representing the charcter as a bitmap
	 */
	public byte[] pixelise(int charsetID, Character d) {
		byte[] bytes = new byte[0];
		if (charsetsMap.containsKey(charsetID)) {
			if (charsetsMap.get(charsetID).containsKey(d)) {
				int idx = charsetsMap.get(charsetID).get(d);
				switch (charsetID) {
					case DOT_MATRIX_CHAR_12X12_DIM:
						bytes = values12x12[idx];						
						break;
					case DOT_MATRIX_CHAR_5X7_DIM:
						bytes = values5x7[idx];
						break;
					default:
						bytes = values5x7[idx];
						break;
				}
			}
		}
		return bytes;
	}
	
	
	/**
	 * Draw a given character according to its charsetID 
	 *  
	 * @param charsetID given charset ID
	 * @param dotSize pixel size of the dot to be displayed
	 * @param dotMargin pixel size of the margin between two dots
	 * @param x horizontal coordinate
	 * @param y vertical coordinate
	 * @param gc {@link GC} reference
	 * @param d character to draw
	 */
	public void drawCharAtPos(int dotSize, int charsetID, int x, int y, GC gc, Character d) {
		byte bytes[] = DotMatrixUtils.INSTANCE.pixelise(charsetID, d);
		
		Dimension dim = charsetDim.get(charsetID);
		
		if (bytes != null && bytes.length >= (dim.width * dim.height)) {
			for (int j=0; j<dim.height; j++) {
				for (int i=0;i<dim.width;i++) {
					if ((bytes[(j*dim.width)+i] & 1) != 0) {
						gc.setAdvanced(true);
						gc.fillRectangle(
							x, 
							y, 
							1, 
							1
						);
						gc.setAlpha(200);
						gc.fillRectangle(
							x, 
							y, 
							dotSize, 
							dotSize
						);
					}
				}
			}
		}
	}

	/**
	 * Draw a given character according to its charsetID 
	 *  
	 * @param charsetID given charset ID
	 * @param dotSize pixel size of the dot to be displayed
	 * @param dotMargin pixel size of the margin between two dots
	 * @param line line number
	 * @param col column number
	 * @param gc {@link GC} reference
	 * @param d character to draw
	 */
	public void drawChar(int dotSize, int dotMargin, int charsetID, int line, int col, GC gc, Character d) {
		Dimension dim = charsetDim.get(charsetID);

		int xOffset = (col	* (((dotSize+1) * (dim.width + 1))));
		int yOffset = (line	* (((dotSize+1) * (dim.height + 1))));
		
		byte bytes[] = DotMatrixUtils.INSTANCE.pixelise(charsetID, d);
		
		if (bytes != null && bytes.length >= (dim.width * dim.height)) {
			for (int j=0; j<dim.height; j++) {
				for (int i=0;i<dim.width;i++) {
					if ((bytes[(j*dim.width)+i] & 1) != 0) {
						gc.setAdvanced(true);
						gc.fillRectangle(
							xOffset + (i * (dotSize + dotMargin)), 
							yOffset + (j * (dotSize + dotMargin)), 
							1, 
							1
						);
						gc.setAlpha(200);
						gc.fillRectangle(
							xOffset + (i * (dotSize + dotMargin)), 
							yOffset + (j * (dotSize + dotMargin)), 
							dotSize, 
							dotSize
						);
					}
				}
			}
		}
	}
	

	public Image processImage(Dimension dim, Dimension dots, Dimension margin, Image img) {
		return LedMatrixImageUtils.INSTANCE.createLedImage(img, dim, dots.width);
	}
}
